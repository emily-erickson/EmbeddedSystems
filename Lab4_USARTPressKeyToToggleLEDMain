/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

void SystemClock_Config(void);
void transmitCharacter(char);
void transmitString(const char[]);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_USART3_CLK_ENABLE(); // Enable the system clock to USART3
		GPIO_InitTypeDef initTxRx = {GPIO_PIN_10 | GPIO_PIN_11, GPIO_MODE_AF_PP, GPIO_AF1_USART3};
		GPIO_InitTypeDef initLEDS = {GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
															GPIO_MODE_OUTPUT_PP,
															GPIO_SPEED_FREQ_LOW,
															GPIO_NOPULL};
	HAL_GPIO_Init(GPIOC, &initTxRx);
	HAL_GPIO_Init(GPIOC, &initLEDS); // Initialize PC6 (red LED), PC7 ((blue LED), PC8 (orange LED), and PC9 (green LED)														
	RCC->APB1ENR |= (1<<18);
	int desiredBaud = 115200;
	int baudDivider = HAL_RCC_GetHCLKFreq() / desiredBaud;
	USART3->BRR = baudDivider;
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; //Enable receive and transmit
	USART3->CR1 |= USART_CR1_UE;
															
  while (1)
  {
		HAL_Delay(100);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
    transmitCharacter('E');
		//char hello[] = {'h','e','l','l','o','\0'};
		//transmitString(hello);
		
		
		// Check and wait on the USART status flag that indicates the receive (read) register is not empty
		if (USART3->ISR & USART_ISR_RXNE) {
			// Get the data
			char color = USART3->RDR;
			// Test the received data
			if (color == 'r')
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // Toggle red LED
			else if (color == 'y')
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); // Toggle yellow LED
			else if (color == 'b')
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); // Toggle blue LED
			else if (color == 'o')
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); // Toggle orange LED
			else {
				// Send error message if key isn't recognised
				char error[] = {'i','n','v','a','l','i','d',' ','c','h','a','r','a','c','t','e','r','\0'};
				transmitString(error);
			}
				
		}
		// Test the received data 
		
  }
  /* USER CODE END 3 */
}

// Function that transmits a single character on the USART
void transmitCharacter(char character){
	
	// Check and wait on the USART status flag that indicates the transmit register is empty
while(USART3->ISR & USART_ISR_TXE){
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);}
	// Write the character into the transmit data register
		USART3->TDR = character;
		// Status bit is automatically cleared by peripheral when you write into transmit register
}

void transmitString(const char str[]){
	for (int i=0; str[i] != '\0'; i++){
		transmitCharacter(str[i]);
	}
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

