/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#include "main.h"


void SystemClock_Config(void);


/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();


  /* Configure the system clock */
  SystemClock_Config();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_I2C2_CLK_ENABLE();
	
	GPIO_InitTypeDef initPB11= {GPIO_PIN_11, GPIO_MODE_AF_OD, GPIO_AF1_I2C2 };
	GPIO_InitTypeDef initPB13 = {GPIO_PIN_13, GPIO_MODE_AF_OD, GPIO_AF1_I2C2};
	GPIO_InitTypeDef initPB14 = {GPIO_PIN_14, GPIO_MODE_OUTPUT_PP};
	GPIO_InitTypeDef initPC0 = {GPIO_PIN_0, GPIO_MODE_OUTPUT_PP};
	//GPIO_InitTypeDef initPB15 = {GPIO_PIN_15, GPIO_MODE_INPUT};
	
	HAL_GPIO_Init(GPIOB, &initPB11);
	HAL_GPIO_Init(GPIOB, &initPB13);
	HAL_GPIO_Init(GPIOB, &initPB14);
	HAL_GPIO_Init(GPIOC, &initPC0);
	//HAL_GPIO_Init(GPIOB, &initPB15);
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	
	// Set the parameters in the TIMINGR register to use 100 kHz standard-mode I2C
	I2C2->TIMINGR = //5.3
	// Enable the I2C peripheral using the PE bit in the CR1 register
	I2C2->CR1 = 
	
	// Set slave adress of L3GD20 sensor
	I2C2->CR2 |= (0x6B << 1);
	
	// Set number of bytes to transmit to 1
	I2C2->CR2 |= (1 << 16);
	
	// Set RD_WRN bit to write operation
    I2C2->CR2 &= ~I2C_CR2_RD_WRN;
		
	// Set the start bit
		I2C2->CR2 |= I2C_CR2_START;
		
	// Wait until either of the TXIS (Transmit Register Empty/Ready) or NACKF (Slave NotAcknowledge) flags are set
	while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) {}
	
	// Write the address of the “WHO_AM_I” register into the I2C transmit register. (TXDR)
	I2C2->TXDR = 0x0F;
	
	// Wait until the TC (Transfer Complete) flag is set
	while (!(I2C2->ISR & I2C_ISR_TC)) {}
	
	// Reload the CR2 register with the same parameters as before, but set the RD_WRN bit to indicate a read operation. Don't forget start operation.
	I2C2->CR2 &= ~(I2C_CR2_RD_WRN);
	I2C2->CR2 |= I2C_CR2_START;
	
	// Wait until either of the RXNE (Receive Register Not Empty) or NACKF (Slave NotAcknowledge) flags are set
	while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF))) {}
	
	// Wait until the TC (Transfer Complete) flag is set
	while (!(I2C2->ISR & I2C_ISR_TC)) {}

	// Check the contents of the RXDR register to see if it matches 0xD4 (expected value of the “WHO_AM_I” register)
	if (I2C2->RXDR == 0xD4) {
    // Value matches expected. Proceed
	} else {
    // Value doesn't match. Some corrective action should be taken or error thrown.
	}
		
	// Set the STOP bit in the CR2 register to release the I2C bus
	I2C2->CR2 |= I2C_CR2_STOP;
	
	
	// PART 2 of LAB...
	// Enable the X and Y sensing axes in the CTRL_REG1 register
	
	
	// Set the sensor into “normal or sleep mode” using the PD bit in the CTRL_REG1 register
	
	
	// All other bits in the CTRL_REG1 register should be set to 0. These place the device in the default low-speed mode
	
  while (1)
  {

  }
 
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

